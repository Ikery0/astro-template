---


const { href, title, body } = Astro.props;
---
<li class="link-card">
	<astro-ikemoto>
		<a href={href} class="js-fadeIn">
			<h2>
				{title}
				<span>&rarr;</span>
			</h2>
			<p>
				{body}
			</p>
		</a>
	</astro-ikemoto>
</li>
<script>
import {ScrollObserver} from '../js/lib/scroll';
document.addEventListener('DOMContentLoaded', () => {
	class AstroIkemoto extends HTMLElement {
		constructor() {
			super();

			const cardLink = this.querySelector('a');

			// ボタンがクリックされるごとにカウントを更新する。
			cardLink.addEventListener('click', (e) => {
				e.preventDefault();
				console.log('クリック');
			});

			new ScrollObserver(cardLink, fadeIn, {
				rootMargin: '-300px 0px -100px 0px',
			});
			function fadeIn(el, inview) {
				inview ? el.classList.add('u-fadeIn') : el.classList.remove('u-fadeIn');
			}
		}
	}
	 customElements.define('astro-ikemoto', AstroIkemoto);
})
</script>
<style lang="scss">
	.link-card {
		list-style: none;
		display: block;
		padding: 1px;

		a {
			display: block;
			box-sizing: border-box;
			width: 100%;
			text-decoration: none;
			line-height: 1.4;
			padding: calc(1.5rem - 1px);
			border-radius: 8px;
			color: white;
			background-color: #23262d;
			background-image: var(--accent-gradient);
			background-size: 400%;
			border-radius: 7px;
			background-position: 25%;
			transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
			transition: opacity 0.6s cubic-bezier(0.22, 1, 0.36, 1);
			box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
			opacity: 0.8;

			&:is(:hover, :focus-within) {
				background-position: 0;
				background-image: var(--accent-gradient);
			}
			&:is(:hover, :focus-within) h2 {
				color: rgb(var(--accent-light));
			}

			&.js-fadeIn {
				opacity: 0;
				transition: all 0.6s ease-out;
			}

			&.u-fadeIn {
				opacity: 0.8;
			}
		}
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}

</style>
